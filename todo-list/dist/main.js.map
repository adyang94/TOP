{"version":3,"sources":["webpack://todo-list/./src/index.js","webpack://todo-list/./src/popOutForm.js","webpack://todo-list/./src/renderTasks.js","webpack://todo-list/./src/sidebar.js","webpack://todo-list/webpack/bootstrap","webpack://todo-list/webpack/runtime/define property getters","webpack://todo-list/webpack/runtime/hasOwnProperty shorthand","webpack://todo-list/webpack/runtime/make namespace object","webpack://todo-list/webpack/startup"],"names":[],"mappings":";;;;;;;;;;;;;AAAA;AACuC;AACE;;AAEzC;;AAEA;AACA;AACA,kDAAY,CAAC;AACb;AACA,oDAAW,CAAC;;;AAGZ;;AAEA;AACA,0B;;;;;;;;;;;;;;;;;AChBA;AAC0C;AAC1C;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,QAAQ,yDAAW;AACnB,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL,IAAI,yDAAW;AACf,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;AAKC;;;;;;;;;;;;;;;;AC5DD;AACmC;AACQ;;AAE3C;;AAEA;AACA;AACA,iBAAiB,8CAAK;;AAEtB;;AAEA;AACA;AACA;AACA;;AAEA,gBAAgB,KAAK,qDAAY,CAAC;AAClC;AACA;AACA;AACA;AACA;;AAEA,uCAAuC,sDAAa,CAAC;AACrD,YAAY,sDAAa;;AAEzB,gBAAgB,wDAAe,KAAK,sDAAa;AACjD;AACA;AACA;AACA;AACA;AACA,2CAA2C,8CAAK,UAAU;;AAE1D,uDAAuD,8CAAK,gBAAgB;;AAE5E,2CAA2C,8CAAK,YAAY;AAC5D,+CAA+C,8CAAK,cAAc;AAClE;;AAEA;AACA;AACA;AACA;AACA;AACA,oCAAoC,uBAAuB;AAC3D;AACA,yCAAyC,uBAAuB;AAChE,YAAY,qDAAY;AACxB;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACqB;;;;;;AAMrB;AACA;AACA;AACA;AACA,+BAA+B,WAAW;AAC1C;AACA;;AAEA;AACA;AACA;AACA;AACA,2CAA2C,iBAAiB;AAC5D;AACA;;AAEA;AACA;AACA;AACA;AACA,+BAA+B,aAAa;AAC5C;AACA,+C;;;;;;;;;;;;;;;;ACxFA;AACA;AACqC;AACO;AACD;;AAE3C;;AAEA;AACA;AACA;AACA;AACA;AACA,iE;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,4DAA4D,8CAAK;AACjE;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,sDAAa;;AAE7B,gBAAgB,yDAAW,CAAC,sDAAa;;AAEzC,+CAA+C,KAAK;AACpD;AACA,aAAa;;AAEb;AACA,0CAA0C,KAAK;AAC/C;AACA,8CAA8C,EAAE;AAChD;;AAEA;AACA;AACA;AACA,kDAAkD,EAAE;AACpD;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,sBAAsB,8CAAK;AAC3B;AACA;AACA;AACA;AACA;AACA,iBAAiB,sDAAa;AAC9B;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;;;;;;UC9GA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCrBA;WACA;WACA;WACA;WACA,wCAAwC,yCAAyC;WACjF;WACA;WACA,E;;;;;WCPA,sF;;;;;WCAA;WACA;WACA;WACA,sDAAsD,kBAAkB;WACxE;WACA,+CAA+C,cAAc;WAC7D,E;;;;UCNA;UACA;UACA;UACA","file":"main.js","sourcesContent":["//CONST AND VARIABLES--------------------------------------------\nimport {sidebarSetup} from \"./sidebar\";\nimport {popOutSetup} from \"./popOutForm\";\n\n//FUNCTIONS------------------------------------------------------\n\n//get old info\nconsole.log('1');\nsidebarSetup; //set up side bar\nconsole.log('2');\npopOutSetup;  //SET UP POP OUT FOR NEW TASKS\n\n\n//create new tasks\n\n//SCRIPT---------------------------------------------------------\nconsole.log('JS working');","//CONST AND VARIABLES--------------------------------------------\nimport {renderTasks} from './renderTasks';\nlet tasks = [];\nlet groupSelected = 'x';\n\n//FUNCTIONS------------------------------------------------------\nconst popOutSetup = (() => {\n    \n    console.log('popOut setup working');\n    tasks[0] = {\n        'title': 'test title',\n        'description': 'test description',\n        'dueDate': '1/1/01',\n        'taskGroup': 'test group'\n    };\n    tasks[1] = {\n        'title': 'test chore',\n        'description': 'test description',\n        'dueDate': '1/1/01',\n        'taskGroup': 'test chore'\n    }\n\n    \n    let popOutForm = document.querySelector('#popOutForm');\n    let submitBtn = document.querySelector('.submitBtn');\n    let popOutTitle = document.querySelector('.popOutTitle');\n    let popOutDescription = document.querySelector('.popOutDescription');\n    let popOutDueDate = document.querySelector('.popOutDueDate');\n    let newTask;\n    let addTaskButton = document.querySelector('.addTaskBtn');\n\n    submitBtn.addEventListener('click', () => {\n        popOutForm.classList.remove('popOutFormOn');\n        popOutForm.classList.add('popOutFormOff');\n        \n        newTask = new addNewTask(popOutTitle, popOutDescription, popOutDueDate);\n        tasks.push(newTask);\n\n        console.log([tasks]);\n        renderTasks();\n    });\n    addTaskButton.addEventListener('click', () => {\n        popOutForm.classList.remove('popOutFormOff');\n        popOutForm.classList.add('popOutFormOn');\n    });\n    renderTasks();\n})();\n\nfunction addNewTask(title, description, dueDate) {\n    this.title = title.value;\n    this.description = description.value;\n    this.dueDate = dueDate.value;\n    this.taskGroup = 'test group';\n\n}\n//SCRIPT---------------------------------------------------------\nexport {\n    popOutSetup,\n    tasks,\n    groupSelected\n}\n","//CONST AND VARIABLES--------------------------------------------\nimport {tasks} from './popOutForm';\nimport {groupSelected} from \"./popOutForm\";\n\n//FUNCTIONS------------------------------------------------------\n\nfunction renderTasks () {\n    console.log('render tasks module working');\n    console.log([tasks]);\n    \n    let main = document.querySelector('.main');\n\n    //erase current tasks\n    while(main.firstChild) {\n        main.removeChild(main.firstChild);\n    }\n        \n    for(let i=0; i < tasks.length; i++){\n        //task container\n        let taskContainer = document.createElement('div');\n        taskContainer.classList.add('taskContainer');\n        taskContainer.dataset.task = i;\n        let taskText = document.createElement('p');\n\n        console.log(`group selected: ${groupSelected}`);\n        if (groupSelected) {\n\n            if (tasks.taskGroup !== groupSelected) {\n                break;\n            };\n        };\n        taskText.innerHTML = \n            `\n            <span class = \"title\">Title: ${tasks[i].title}</span><br>\n\n            <span class = \"description\">Description: ${tasks[i].description}</span> <br>\n\n            <span class = \"dueDate\">Due: ${tasks[i].dueDate}</span><br>\n            <span class = \"taskGroup\">Group: ${tasks[i].taskGroup}</span><br>`;\n        taskContainer.appendChild(taskText);\n\n        //remove button\n        let removeBtn = document.createElement('button');\n        removeBtn.classList.add('removeBtn');\n        removeBtn.dataset.task = i;\n        removeBtn.innerHTML = 'X';\n        console.log(`dataset btn: ${removeBtn.dataset.task}`);\n        removeBtn.addEventListener('click', (event, srcElement) => {\n            console.log(`dataset btn1: ${removeBtn.dataset.task}`);\n            tasks.splice(event.srcElement.dataset.task, 1);\n            renderTasks();\n        })\n        taskContainer.appendChild(removeBtn);\n        \n        //append all elements\n        main.appendChild(taskContainer);\n    }\n    \n}\n//SCRIPT---------------------------------------------------------\nexport {renderTasks};\n\n\n\n\n\n// //title\n// let titleContainer = document.createElement('div');\n// let title = document.createElement('div');\n// title.classList.add('title');\n// title.innerHTML = `Title: ${task.title} <br> `;\n// titleContainer.appendChild(title);\n// taskContainer.appendChild(titleContainer);\n\n// //description\n// let descriptionContainer = document.createElement('div');\n// let description = document.createElement('div');\n// description.classList.add('description');\n// description.innerHTML = `Description: ${task.description}`;\n// descriptionContainer.appendChild(description);\n// taskContainer.appendChild(descriptionContainer);\n\n// //due date\n// let dueDateContainer = document.createElement('div');\n// let dueDate = document.createElement('div');\n// dueDate.classList.add('dueDate');\n// dueDate.innerHTML = `Due: ${task.dueDate}`;\n// dueDateContainer.appendChild(dueDate);\n// taskContainer.appendChild(dueDateContainer);","// ***Start with sidebarSetup***\nlet groups = [];\nimport { tasks } from \"./popOutForm\";\nimport { renderTasks } from \"./renderTasks\";\nimport {groupSelected} from \"./popOutForm\";\n\n//CONST AND VARIABLES--------------------------------------------\n\n//FUNCTIONS------------------------------------------------------\nconst addNewGroup = (() => {\n    //add new group in the sidebar menu.\n    let newGroupBtn = document.querySelector('.newGroupBtn');\n    let newGroupInputContainer = document.querySelector('.newGroupInputContainer');\n    let newGroupTitle = document.querySelector('.newGroupTitle'); \n        //group title input\n    let submitNewGroupBtn = document.querySelector('.submitNewGroupBtn');\n    \n    newGroupBtn.addEventListener('click', () => {\n        //the code below will display the input to add new groups (current display is set to none in the HTML file.)\n        newGroupInputContainer.setAttribute('style', 'display: initial');\n    })\n\n    submitNewGroupBtn.addEventListener('click', () => {\n        //SUBMIT AND CREATE NEW GROUP\n        let newGroup = new createGroup(newGroupTitle.value, tasks);\n        groups.push(newGroup);\n        newGroupInputContainer.setAttribute('style', 'display: none');\n        console.log([groups]);\n        renderGroups();\n    })\n})();\nfunction renderGroups() {\n    let groupsContainer = document.querySelector('.groupsContainer');\n    //remove all groups and render again.\n    while(groupsContainer.firstChild) {\n        groupsContainer.removeChild(groupsContainer.firstChild);\n    };\n    //rendering groups\n    for (let i = 0; i < groups.length; i++) {\n        const name = groups[i].groupName;\n        let groupContainer = document.createElement('div');\n            groupContainer.classList.add('groupContainer');\n            \n            //functionality to click on the group name\n            groupContainer.addEventListener('click', () => {\n                groupSelected = groupTitle.dataset.group;\n                \n                renderTasks(groupSelected);\n\n                console.log(`group selected: ${name}`);\n                console.log([groups]);\n            });\n        \n            let groupTitle = document.createElement('div');\n                groupTitle.innerHTML = `${name}`;\n                groupTitle.classList.add('groupTitle');\n                groupTitle.dataset.group = `${i}`;\n                groupContainer.appendChild(groupTitle);\n\n            let groupRemoveBtn = document.createElement('button');\n                groupRemoveBtn.innerHTML = 'X';\n                groupRemoveBtn.classList.add('groupRemoveBtn');\n                groupRemoveBtn.dataset.group = `${i}`;\n                //remove group button\n                groupRemoveBtn.addEventListener('click', (event, srcElement) => {\n                    groups.splice(event.srcElement.dataset.group, 1)\n                    renderGroups();\n                })\n                groupContainer.appendChild(groupRemoveBtn);\n        groupsContainer.appendChild(groupContainer);\n    }\n}\nfunction createGroup(title, associatedTasks) {\n    this.groupName = title;\n    this.groupTasks = associatedTasks;\n}\n\nconst toggleSidebar = (() => {\n    let closeSidebarBtn = document.querySelector('.closeSidebarBtn');\n    let toggleContainer = document.querySelector('.toggleContainer');\n    let sidebar = document.querySelector('.sidebar');\n    \n    closeSidebarBtn.addEventListener('click', () => {\n        sidebar.classList.remove('openNav');\n        sidebar.classList.add('closeNav');\n    })\n    toggleContainer.addEventListener('click', () => {\n        console.log('toggle container pushed');\n        sidebar.classList.remove('closeNav');\n        sidebar.classList.add('openNav');\n    })\n})();\nconst sidebarSetup = (() => {\n    console.log('sidebar setup working');\n    //render existing groups\n    groups[0] = {\n        'groupName': \"test group\",\n        'groupTasks': tasks\n    };\n    groups[1] = {\n        'groupName': 'test chores',\n        'groupTasks': []\n    };\n    renderGroups(groupSelected);\n    //add new group for tasks\n    addNewGroup;\n    //toggle open/close sidebar\n    toggleSidebar;\n    //render sidebar\n})();\n//SCRIPT---------------------------------------------------------\nexport {sidebarSetup};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module\n__webpack_require__(\"./src/index.js\");\n// This entry module used 'exports' so it can't be inlined\n"],"sourceRoot":""}